<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Glow</title>
  
  <subtitle>Building things on web!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://glows.github.io/"/>
  <updated>2020-08-25T10:35:06.913Z</updated>
  <id>https://glows.github.io/</id>
  
  <author>
    <name>Glow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网页录音</title>
    <link href="https://glows.github.io/2020/08/19/2020-8-19-%E7%BD%91%E9%A1%B5%E5%BD%95%E9%9F%B3/"/>
    <id>https://glows.github.io/2020/08/19/2020-8-19-%E7%BD%91%E9%A1%B5%E5%BD%95%E9%9F%B3/</id>
    <published>2020-08-19T02:57:35.000Z</published>
    <updated>2020-08-25T10:35:06.913Z</updated>
    
    <content type="html"><![CDATA[<p>var audioCtx = new AudioContext();<br>var source = audioCtx.createMediaStreamSource(stream);</p><p>或者使用第三方库<a href="https://github.com/xiangyuecn/Recorder" target="_blank" rel="noopener">Recorder</a>, github: <a href="https://github.com/xiangyuecn/Recorder" target="_blank" rel="noopener">https://github.com/xiangyuecn/Recorder</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;var audioCtx = new AudioContext();&lt;br&gt;var source = audioCtx.createMediaStreamSource(stream);&lt;/p&gt;
&lt;p&gt;或者使用第三方库&lt;a href=&quot;https://github.com/x
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>WebSocket 封装</title>
    <link href="https://glows.github.io/2020/08/19/2020-8-19-WebSocket-%E5%B0%81%E8%A3%85/"/>
    <id>https://glows.github.io/2020/08/19/2020-8-19-WebSocket-%E5%B0%81%E8%A3%85/</id>
    <published>2020-08-19T02:03:07.000Z</published>
    <updated>2020-08-19T02:56:25.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebSocket-封装"><a href="#WebSocket-封装" class="headerlink" title="WebSocket 封装"></a>WebSocket 封装</h2><p>WebSocket是一种网络传输协议，可在单个TCP连接上进行全双工通信，位于OSI模型的应用层。</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输。</p><p>WebSocket协议规范将ws（WebSocket）和wss（WebSocket Secure）定义为两个新的统一资源标识符（URI）方案，分别对应明文和加密连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> websock = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> messageCallback = <span class="literal">null</span>   <span class="comment">// callback message important !!!!</span></span><br><span class="line"><span class="keyword">let</span> errorCallback = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> wsUrl = <span class="string">''</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 接收ws后端返回的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">websocketonmessage</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  messageCallback(<span class="built_in">JSON</span>.parse(e.data))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发起websocket连接</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; agentData 需要向后台传递的参数数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">websocketSend</span> (<span class="params">agentData</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 加延迟是为了尽量让ws连接状态变为OPEN  </span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 添加状态判断，当为OPEN时，发送消息</span></span><br><span class="line">    <span class="keyword">if</span> (websock.readyState === websock.OPEN) &#123; <span class="comment">// websock.OPEN = 1</span></span><br><span class="line">      <span class="comment">// 发给后端的数据需要字符串化</span></span><br><span class="line">      websock.send(<span class="built_in">JSON</span>.stringify(agentData))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (websock.readyState === websock.CLOSED) &#123; <span class="comment">// websock.CLOSED = 3</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'websock.readyState=3'</span>)</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'ws连接异常，请稍候重试'</span>)</span><br><span class="line">      errorCallback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 关闭ws连接</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">websocketclose</span> (<span class="params">e</span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// e.code === 1000  表示正常关闭。 无论为何目的而创建, 该链接都已成功完成任务。</span></span><br><span class="line">  <span class="comment">// e.code !== 1000  表示非正常关闭。</span></span><br><span class="line">  <span class="keyword">if</span> (e &amp;&amp; e.code !== <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'ws连接异常，请稍候重试'</span>)</span><br><span class="line">    errorCallback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 建立ws连接</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">websocketOpen</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log('ws连接成功')</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 初始化weosocket</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initWebSocket</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (WebSocket) === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'您的浏览器不支持WebSocket，无法获取数据'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> token = <span class="string">'JWT='</span> + getToken()</span><br><span class="line">  <span class="comment">// ws请求完整地址</span></span><br><span class="line">  <span class="keyword">const</span> requstWsUrl = wsUrl + <span class="string">'?'</span> + token</span><br><span class="line">  websock = <span class="keyword">new</span> WebSocket(requstWsUrl)</span><br><span class="line"></span><br><span class="line">  websock.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    websocketonmessage(e)   <span class="comment">// callback message important !!!!!!!</span></span><br><span class="line">  &#125;</span><br><span class="line">  websock.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    websocketOpen()</span><br><span class="line">  &#125;</span><br><span class="line">  websock.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'ws连接异常，请稍候重试'</span>)</span><br><span class="line">    errorCallback()</span><br><span class="line">  &#125;</span><br><span class="line">  websock.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    websocketclose(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发起websocket请求函数</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; url ws连接地址</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; agentData 传给后台的参数</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; successCallback 接收到ws数据，对数据进行处理的回调函数</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; errCallback ws连接错误的回调函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sendWebsocket</span> (<span class="params">url, agentData, successCallback, errCallback</span>) </span>&#123;</span><br><span class="line">  wsUrl = url</span><br><span class="line">  initWebSocket()</span><br><span class="line">  messageCallback = successCallback   <span class="comment">// callback message important !!!!!!!</span></span><br><span class="line">  errorCallback = errCallback</span><br><span class="line">  websocketSend(agentData)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * close websocket function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">closeWebsocket</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (websock) &#123;</span><br><span class="line">    websock.close() </span><br><span class="line">    websock.onclose() </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://www.codenong.com/cs105794108/" target="_blank" rel="noopener">封装websocket请求—–vue项目实战</a><br><a href="">回调函数</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WebSocket-封装&quot;&gt;&lt;a href=&quot;#WebSocket-封装&quot; class=&quot;headerlink&quot; title=&quot;WebSocket 封装&quot;&gt;&lt;/a&gt;WebSocket 封装&lt;/h2&gt;&lt;p&gt;WebSocket是一种网络传输协议，可在单个TCP连接上进
      
    
    </summary>
    
    
    
      <category term="WebSocket" scheme="https://glows.github.io/tags/WebSocket/"/>
    
      <category term="Javascript" scheme="https://glows.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>常见数据结构</title>
    <link href="https://glows.github.io/2020/04/15/2020-4-15-%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://glows.github.io/2020/04/15/2020-4-15-%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-04-15T06:41:47.000Z</published>
    <updated>2020-08-10T06:56:48.949Z</updated>
    
    <content type="html"><![CDATA[<p>回到最初，计算机科学</p><p>基础学科内容，比如：网络知识、数据结构算法<br>编程思想<br><a id="more"></a><br>时间复杂度</p><p>常数时间 O(1) 代表这个操作和数据量没关系，是一个固定时间的操作，比如说四则运算。</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈是一种LIFO(Last-In-First-Out，后进先出)的 数据结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.stack = []</span><br><span class="line">  &#125;</span><br><span class="line">  push(item) &#123;</span><br><span class="line">    <span class="keyword">this</span>.stack.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack[<span class="keyword">this</span>.getCount() - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  getCount() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.stack.length</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getCount() === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列数据结构的访问 规则是FIFO(First-In-First-Out，先进先出)。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.stack.push(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.stack.shift()   <span class="comment">//移除数组中的第一个项并返回该项</span></span><br></pre></td></tr></table></figure></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>单向链表<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(v, next) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = v</span><br><span class="line">    <span class="keyword">this</span>.next = next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 链表长度</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 虚拟头部</span></span><br><span class="line">    <span class="keyword">this</span>.dummyNode = <span class="keyword">new</span> Node(<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  find(header, index, currentIndex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === currentIndex) <span class="keyword">return</span> header</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(header.next, index, currentIndex + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  addNode(v, index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.checkIndex(index)</span><br><span class="line">    <span class="comment">// 当往链表末尾插入时，prev.next 为空</span></span><br><span class="line">    <span class="comment">// 其他情况时，因为要插入节点，所以插入的节点</span></span><br><span class="line">    <span class="comment">// 的 next 应该是 prev.next</span></span><br><span class="line">    <span class="comment">// 然后设置 prev.next 为插入的节点</span></span><br><span class="line">    <span class="keyword">let</span> prev = <span class="keyword">this</span>.find(<span class="keyword">this</span>.dummyNode, index, <span class="number">0</span>)</span><br><span class="line">    prev.next = <span class="keyword">new</span> Node(v, prev.next)</span><br><span class="line">    <span class="keyword">this</span>.size++</span><br><span class="line">    <span class="keyword">return</span> prev.next</span><br><span class="line">  &#125;</span><br><span class="line">  insertNode(v, index) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.addNode(v, index)</span><br><span class="line">  &#125;</span><br><span class="line">  addToFirst(v) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.addNode(v, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  addToLast(v) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.addNode(v, <span class="keyword">this</span>.size)</span><br><span class="line">  &#125;</span><br><span class="line">  removeNode(index, isLast) &#123;</span><br><span class="line">    <span class="keyword">this</span>.checkIndex(index)</span><br><span class="line">    index = isLast ? index - <span class="number">1</span> : index</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="keyword">this</span>.find(<span class="keyword">this</span>.dummyNode, index, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> node = prev.next</span><br><span class="line">    prev.next = node.next</span><br><span class="line">    node.next = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.size--</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">  removeFirstNode() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.removeNode(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  removeLastNode() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.removeNode(<span class="keyword">this</span>.size, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  checkIndex(index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size) <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'Index error'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  getNode(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.checkIndex(index)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(<span class="keyword">this</span>.dummyNode, index, <span class="number">0</span>).next</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  getSize() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>二叉树</p><p>二分搜索树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  getSize() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size</span><br><span class="line">  &#125;</span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  addNode(v) &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="keyword">this</span>._addChild(<span class="keyword">this</span>.root, v)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加节点时，需要比较添加的节点值和当前</span></span><br><span class="line">  <span class="comment">// 节点值的大小</span></span><br><span class="line">  _addChild(node, v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">      <span class="keyword">this</span>.size++</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Node(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.value &gt; v) &#123;</span><br><span class="line">      node.left = <span class="keyword">this</span>._addChild(node.left, v)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.value &lt; v) &#123;</span><br><span class="line">      node.right = <span class="keyword">this</span>._addChild(node.right, v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AVL 树</p><p>改进了二分搜索树</p><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>概念<br>在计算机科学，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。</p><p>简单点来说，这个结构的作用大多是为了方便搜索字符串，该树有以下几个特点</p><p>根节点代表空字符串，每个节点都有 N（假如搜索英文字符，就有 26 条） 条链接，每条链接代表一个字符<br>节点不存储字符，只有路径才存储，这点和其他的树结构不同<br>从根节点开始到任意一个节点，将沿途经过的字符连接起来就是该节点对应的字符串</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回到最初，计算机科学&lt;/p&gt;
&lt;p&gt;基础学科内容，比如：网络知识、数据结构算法&lt;br&gt;编程思想&lt;br&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://glows.github.io/tags/javascript/"/>
    
      <category term="数据结构" scheme="https://glows.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>React-Hooks 学习</title>
    <link href="https://glows.github.io/2020/02/12/2020-2-12-%E5%AD%A6%E4%BC%9AReact-Hooks/"/>
    <id>https://glows.github.io/2020/02/12/2020-2-12-%E5%AD%A6%E4%BC%9AReact-Hooks/</id>
    <published>2020-02-12T02:41:47.000Z</published>
    <updated>2020-08-25T10:28:16.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Hooks-含义"><a href="#React-Hooks-含义" class="headerlink" title="React Hooks 含义"></a>React Hooks 含义</h2><p>为函数组件提供钩子以实现外部功能，如添加状态</p><h3 id="React-默认提供的四个最常用的钩子"><a href="#React-默认提供的四个最常用的钩子" class="headerlink" title="React 默认提供的四个最常用的钩子"></a>React 默认提供的四个最常用的钩子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useState()  <span class="comment">//状态</span></span><br><span class="line"></span><br><span class="line">useEffect()    <span class="comment">//函数副作用</span></span><br><span class="line">useContext()</span><br><span class="line">useReducer()</span><br></pre></td></tr></table></figure><h3 id="更多的-Hook包括"><a href="#更多的-Hook包括" class="headerlink" title="更多的 Hook包括"></a>更多的 Hook包括</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">useReducer</span><br><span class="line">useCallback</span><br><span class="line">useMemo</span><br><span class="line">useRef</span><br><span class="line">useImperativeHandle</span><br><span class="line">useLayoutEffect</span><br><span class="line">useDebugValue</span><br><span class="line">自定义Hook</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h2><p>Typescript中搭配useImperativeHandle 和 forwardRef使用<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> MyInputHandles &#123;</span><br><span class="line">  focus(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyInput: RefForwardingComponent&lt;MyInputHandles, MyInputProps&gt; = (</span><br><span class="line">  props,</span><br><span class="line">  ref</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef&lt;HTMLInputElement&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  useImperativeHandle(ref, <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    focus: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (inputRef.current) &#123;</span><br><span class="line">        inputRef.current.focus();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;input &#123;...props&#125; ref=&#123;inputRef&#125; /&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> forwardRef(MyInput);</span><br></pre></td></tr></table></figure></p><p>建议useImperativeHandle和forwardRef同时使用，减少暴露给父组件的属性，避免使用 ref 这样的命令式代码<br>import {  useRef,forwardRef,MutableRefObject,useImperativeHandle,Ref} from “react”;</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只暴露value、getType、focus给父级</span></span><br><span class="line"><span class="keyword">const</span> InputEl = forwardRef((props: &#123;&#125;, ref: Ref&lt;<span class="built_in">any</span>&gt;): JSX.Element=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> inputEl: MutableRefObject&lt;<span class="built_in">any</span>&gt; = useRef();</span><br><span class="line"></span><br><span class="line">    useImperativeHandle(ref, <span class="function"><span class="params">()</span>=&gt;</span>(&#123;<span class="comment">//第一个参数：暴露哪个ref；第二个参数：暴露什么</span></span><br><span class="line">        value: (inputEl.current <span class="keyword">as</span> HTMLInputElement).value,</span><br><span class="line">        getType: <span class="function"><span class="params">()</span> =&gt;</span> (inputEl.current <span class="keyword">as</span> HTMLInputElement).type,</span><br><span class="line">        focus: <span class="function"><span class="params">()</span> =&gt;</span> (inputEl.current <span class="keyword">as</span> HTMLInputElement).focus()</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;input ref=&#123;inputEl&#125; <span class="keyword">type</span>=<span class="string">"text"</span> &#123;...props&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//暴露整个input节点给父级</span></span><br><span class="line"><span class="keyword">const</span> InputEl = forwardRef((props: &#123;&#125;, ref: Ref&lt;<span class="built_in">any</span>&gt;): JSX.Element=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;input ref=&#123;ref&#125; <span class="keyword">type</span>=<span class="string">"text"</span> &#123;...props&#125;/&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//父级</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InputWithFocusButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> inputEl: MutableRefObject&lt;<span class="built_in">any</span>&gt; = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onButtonClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'子组件input的对象:'</span>, inputEl.current);</span><br><span class="line">        inputEl.current.focus();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &lt;InputEl ref=&#123;inputEl&#125; /&gt;</span><br><span class="line">            &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制代码通过forwardRef，父组件获取子组件的ref，子组件在暴露ref中，限制暴露的一些参数</p><p>参考：<br><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html" target="_blank" rel="noopener">React 文档</a><br>        <a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">useEffect完全指南</a><br>        <a href="https://www.bilibili.com/video/BV1VE411w7wi?p=1" target="_blank" rel="noopener">video</a><br>        <a href="https://my.oschina.net/yj1993/blog/4327889" target="_blank" rel="noopener"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-Hooks-含义&quot;&gt;&lt;a href=&quot;#React-Hooks-含义&quot; class=&quot;headerlink&quot; title=&quot;React Hooks 含义&quot;&gt;&lt;/a&gt;React Hooks 含义&lt;/h2&gt;&lt;p&gt;为函数组件提供钩子以实现外部功能，如添加状态&lt;/p&gt;
&lt;h3 id=&quot;React-默认提供的四个最常用的钩子&quot;&gt;&lt;a href=&quot;#React-默认提供的四个最常用的钩子&quot; class=&quot;headerlink&quot; title=&quot;React 默认提供的四个最常用的钩子&quot;&gt;&lt;/a&gt;React 默认提供的四个最常用的钩子&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;useState()  &lt;span class=&quot;comment&quot;&gt;//状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useEffect()    &lt;span class=&quot;comment&quot;&gt;//函数副作用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useContext()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useReducer()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;更多的-Hook包括&quot;&gt;&lt;a href=&quot;#更多的-Hook包括&quot; class=&quot;headerlink&quot; title=&quot;更多的 Hook包括&quot;&gt;&lt;/a&gt;更多的 Hook包括&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;useReducer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useCallback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useMemo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useRef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useImperativeHandle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useLayoutEffect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useDebugValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;自定义Hook&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://glows.github.io/tags/javascript/"/>
    
      <category term="React" scheme="https://glows.github.io/tags/React/"/>
    
      <category term="react-hook" scheme="https://glows.github.io/tags/react-hook/"/>
    
  </entry>
  
  <entry>
    <title>Reactjs笔记</title>
    <link href="https://glows.github.io/2019/01/29/ReactJs%E7%AC%94%E8%AE%B0/"/>
    <id>https://glows.github.io/2019/01/29/ReactJs%E7%AC%94%E8%AE%B0/</id>
    <published>2019-01-29T06:30:41.000Z</published>
    <updated>2020-08-10T06:56:48.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="umiJs-antd-mobile-dvaJs"><a href="#umiJs-antd-mobile-dvaJs" class="headerlink" title="umiJs + antd_mobile + dvaJs"></a>umiJs + antd_mobile + dvaJs</h1><p>多类名及动态加载样式方法</p><h2 id="覆盖组件样式"><a href="#覆盖组件样式" class="headerlink" title="覆盖组件样式"></a>覆盖组件样式</h2><p>方法很简单，有两点需要注意：</p><ol><li><p>引入的 antd 组件类名没有被 CSS Modules 转化，所以被覆盖的类名 .ant-select-selection 必须放到 :global 中。</p></li><li><p>因为上一条的关系，覆盖是全局性的。为了防止对其他 Select 组件造成影响，所以需要包裹额外的 className 限制样式的生效范围。<br>e.g.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.customSelect</span> &#123;</span><br><span class="line">  :global &#123;</span><br><span class="line">    <span class="selector-class">.ant-select-selection</span> &#123;</span><br><span class="line">      <span class="attribute">max-height</span>: <span class="number">51px</span>;</span><br><span class="line">      <span class="attribute">overflow</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>model：模型</p><pre><code>模型通常认为是视图(view)的内核，模型就是指视图的数据</code></pre><a id="more"></a><p>// ES7新标准:装饰器（Decorator）<br>@connect(state =&gt; ({<br>    user: state.user,<br>}))</p><p>// 如果您不喜欢ES7装饰器，那好办，我就帮您写一个不用的<br>export default connect(state =&gt; ({<br>    user: state.user,<br>}))(User);</p><h2 id="dva的model-注意点："><a href="#dva的model-注意点：" class="headerlink" title="dva的model 注意点："></a>dva的model 注意点：</h2><p>reducers  命名需正确，注意加s<br>effects</p><h2 id="子组件显示父组件穿过来的props有两种方式："><a href="#子组件显示父组件穿过来的props有两种方式：" class="headerlink" title="子组件显示父组件穿过来的props有两种方式："></a>子组件显示父组件穿过来的props有两种方式：</h2><p>1、直接使用<br>这种方式，父组件改变props后，子组件重新渲染，由于直接使用的props，所以我们不需要做什么就可以正常显示最新的props</p><p>class Child extends Component {<br>    render() {<br>        return <div>{this.props.someThings}</div><br>    }<br>}<br>2、转换成自己的state<br>这种方式，由于我们使用的是state，所以每当父组件每次重新传递props时，我们需要重新处理下，将props转换成自己的state，这里就用到了 componentWillReceiveProps。</p><p>关于你提到的不会二次渲染是这样的：每次子组件接收到新的props，都会重新渲染一次，除非你做了处理来阻止（比如使用：shouldComponentUpdate），但是你可以在这次渲染前，根据新的props更新state，更新state也会触发一次重新渲染，但react不会这么傻，所以只会渲染一次，这对应用的性能是有利的。</p><p>class Child extends Component {<br>    constructor(props) {<br>        super(props);<br>        this.state = {<br>            someThings: props.someThings<br>        };<br>    }<br>    componentWillReceiveProps(nextProps) {<br>        this.setState({someThings: nextProps.someThings});<br>    }<br>    render() {<br>        return <div>{this.state.someThings}</div><br>    }<br>}</p><h2 id="react-jsx语法中如何遍历对象能同时拿到对象中的key和value？"><a href="#react-jsx语法中如何遍历对象能同时拿到对象中的key和value？" class="headerlink" title="react jsx语法中如何遍历对象能同时拿到对象中的key和value？"></a>react jsx语法中如何遍历对象能同时拿到对象中的key和value？</h2><p>const obj = {‘a’: 1, ‘b’: 2}</p><p>Object.keys(obj); //[“a”, “b”]</p><p>Object.values(obj); //[1, 2]</p><p>Object.keys(obj).forEach(key =&gt; console.log(key, obj[key]));<br>//a 1<br>// b 2</p><h2 id="yield-call-put-的使用"><a href="#yield-call-put-的使用" class="headerlink" title="yield call put 的使用"></a>yield call put 的使用</h2><p>call( fuc, arg )</p><h2 id="父组件-需要-setState-组件才会-传递异步的-数据到-props"><a href="#父组件-需要-setState-组件才会-传递异步的-数据到-props" class="headerlink" title="父组件 需要 setState 组件才会 传递异步的 数据到 props"></a>父组件 需要 setState 组件才会 传递异步的 数据到 props</h2><p>前后端路由差别<br>1.后端每次路由请求都是重新访问服务器<br>2.前端路由实际上只是JS根据URL来操作DOM元素，<br>根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;umiJs-antd-mobile-dvaJs&quot;&gt;&lt;a href=&quot;#umiJs-antd-mobile-dvaJs&quot; class=&quot;headerlink&quot; title=&quot;umiJs + antd_mobile + dvaJs&quot;&gt;&lt;/a&gt;umiJs + antd_mobile + dvaJs&lt;/h1&gt;&lt;p&gt;多类名及动态加载样式方法&lt;/p&gt;
&lt;h2 id=&quot;覆盖组件样式&quot;&gt;&lt;a href=&quot;#覆盖组件样式&quot; class=&quot;headerlink&quot; title=&quot;覆盖组件样式&quot;&gt;&lt;/a&gt;覆盖组件样式&lt;/h2&gt;&lt;p&gt;方法很简单，有两点需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入的 antd 组件类名没有被 CSS Modules 转化，所以被覆盖的类名 .ant-select-selection 必须放到 :global 中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为上一条的关系，覆盖是全局性的。为了防止对其他 Select 组件造成影响，所以需要包裹额外的 className 限制样式的生效范围。&lt;br&gt;e.g.&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.customSelect&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  :global &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-class&quot;&gt;.ant-select-selection&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;max-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;51px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;model：模型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;模型通常认为是视图(view)的内核，模型就是指视图的数据
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
      <category term="React" scheme="https://glows.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="https://glows.github.io/2019/01/29/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8Bos/"/>
    <id>https://glows.github.io/2019/01/29/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8Bos/</id>
    <published>2019-01-29T06:30:41.000Z</published>
    <updated>2020-08-10T06:56:48.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="与面向对象的区别"><a href="#与面向对象的区别" class="headerlink" title="与面向对象的区别"></a>与面向对象的区别</h2><p>与面向对象方法将问题分解成多组”名词”或对象不同，函数式方法将相同的问题分解成多组”动词”或者函数。</p><p>与面向对象类似的是，函数式编程也通过”粘结”或”组合”其他函数的方式构建更大的函数，以实现更抽象的行为。</p><p>函数式：通过把功能拆解成一个个小函数组件，再用函数讲各个组件结合完成需求。</p><a id="more"></a><h2 id="多种JS编程方式"><a href="#多种JS编程方式" class="headerlink" title="多种JS编程方式"></a>多种JS编程方式</h2><ul><li>命令式编程<br>通过详细描述行为的编程方式</li><li>基于原型的对象编程<br>基于原型对象和实例的编程方式</li><li>元编程<br>基于模型数据进行编写和操作的编程方式</li><li>函数式编程<br>基于函数进行操作的编程方式<br>Applicative编程函数作为参数的编程方式<br>集合中心编程对数据进行操作，包括对象和数组的编程方式  </li></ul><ul><li>其他编程：<br>面向类型<br>事件编程  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;与面向对象的区别&quot;&gt;&lt;a href=&quot;#与面向对象的区别&quot; class=&quot;headerlink&quot; title=&quot;与面向对象的区别&quot;&gt;&lt;/a&gt;与面向对象的区别&lt;/h2&gt;&lt;p&gt;与面向对象方法将问题分解成多组”名词”或对象不同，函数式方法将相同的问题分解成多组”动词”或者函数。&lt;/p&gt;
&lt;p&gt;与面向对象类似的是，函数式编程也通过”粘结”或”组合”其他函数的方式构建更大的函数，以实现更抽象的行为。&lt;/p&gt;
&lt;p&gt;函数式：通过把功能拆解成一个个小函数组件，再用函数讲各个组件结合完成需求。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="函数式编程" scheme="https://glows.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>解决VSCode保存时自动格式化</title>
    <link href="https://glows.github.io/2018/08/15/%E8%A7%A3%E5%86%B3VSCode%E4%BF%9D%E5%AD%98%E6%97%B6%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>https://glows.github.io/2018/08/15/%E8%A7%A3%E5%86%B3VSCode%E4%BF%9D%E5%AD%98%E6%97%B6%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2018-08-15T06:57:24.000Z</published>
    <updated>2020-08-10T06:56:49.012Z</updated>
    
    <content type="html"><![CDATA[<p>把JS-CS-HTML Formatter这个插件禁用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把JS-CS-HTML Formatter这个插件禁用&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="vscode" scheme="https://glows.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>理解CSS属性：touch-action</title>
    <link href="https://glows.github.io/2018/08/09/%E7%90%86%E8%A7%A3CSS%E5%B1%9E%E6%80%A7%EF%BC%9Atouch-action/"/>
    <id>https://glows.github.io/2018/08/09/%E7%90%86%E8%A7%A3CSS%E5%B1%9E%E6%80%A7%EF%BC%9Atouch-action/</id>
    <published>2018-08-09T03:15:23.000Z</published>
    <updated>2020-08-10T06:56:49.010Z</updated>
    
    <content type="html"><![CDATA[<p>CSS属性 touch-action 用于指定某个给定的区域是否允许用户操作，以及如何响应用户操作（比如浏览器自带的划动、缩放等）。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">auto</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">pan-x</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">pan-left</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">pan-right</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">pan-y</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">pan-up</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">pan-down</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">pinch-zoom</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">manipulation</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">touch-action</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">初始值auto</span><br><span class="line">适用元素all elements except: non-replaced inline elements, table rows, row groups, table columns, and column groups</span><br><span class="line">是否是继承属性否</span><br><span class="line">适用媒体visual</span><br><span class="line">计算值as specified</span><br><span class="line">Animation typediscrete</span><br><span class="line">正规顺序  the unique non-ambiguous order defined by the formal grammar</span><br></pre></td></tr></table></figure><p>默认情况下，平移（滚动）和缩放手势由浏览器专门处理。 使用 Pointer_events 的应用程序将在浏览器开始处理触摸手势时收到一个 pointercancel 事件。 通过明确指定浏览器应该处理哪些手势，应用程序可以在 pointermove 和 pointerup 监听器中为其余的手势提供自己的行为。 使用 Touch_events 的应用程序通过调用 preventDefault() 禁用浏览器处理手势，但也应使用触摸操作确保浏览器在调用任何事件侦听器之前，了解应用程序的意图。</p><p>当手势开始时，浏览器与触摸的元素及其所有祖先的触摸动作值相交直到一个实现手势（换句话说，第一个包含滚动元素）的触摸动作值。 这意味着在实践中，触摸动作通常仅适用于具有某些自定义行为的单个元素，而无需在该元素的任何后代上明确指定触摸动作。 手势开始之后，触摸动作值的更改将不会对当前手势的行为产生任何影响。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>touch-action 属性可以被指定为:</p><p>任何一个关键字 auto、none、manipulation，或<br>零或任何一个关键字 pan-x、pan-left、pan-right，加零或任何一个关键字 pan-y、pan-up、pan-down，加可选关键字 pinch-zoom.</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>auto<br>当触控事件发生在元素上时，由浏览器来决定进行哪些操作，比如对viewport进行平滑、缩放等。<br>none<br>当触控事件发生在元素上时，不进行任何操作。<br>pan-x<br>启用单指水平平移手势。可以与 pan-y 、pan-up、pan-down 和／或 pinch-zoom 组合使用。<br>pan-y<br>启用单指垂直平移手势。可以与 pan-x 、pan-left 、pan-right 和／或 pinch-zoom 组合使用。<br>manipulation<br>浏览器只允许进行滚动和持续缩放操作。任何其它被auto值支持的行为不被支持。启用平移和缩小缩放手势，但禁用其他非标准手势，例如双击以进行缩放。 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。 这是“pan-x pan-y pinch-zoom”（为了兼容性本身仍然有效）的别名。<br>pan-left, pan-right,pan-up,pan-down<br>启用以指定方向滚动开始的单指手势。 一旦滚动开始，方向可能仍然相反。 请注意，滚动“向上”（pan-up）意味着用户正在将其手指向下拖动到屏幕表面上，同样 pan-left 表示用户将其手指向右拖动。 多个方向可以组合，除非有更简单的表示（例如，“pan-left pan-right”无效，因为“pan-x”更简单，而“pan-left pan-down”有效）。<br>pinch-zoom<br>启用多手指平移和缩放页面。 这可以与任何平移值组合。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>最常见的用法是禁用元素（及其不可滚动的后代）上的所有手势，以使用自己提供的拖放和缩放行为（如地图或游戏表面）。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#map</span> &#123;</span><br><span class="line">  <span class="attribute">touch-action</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另一种常见的模式是使用指针事件处理水平平移的图像轮播，但不想干扰网页的垂直滚动或缩放。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image-carousel</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">touch-action</span>: pan-y pinch-zoom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>触摸动作也经常用于完全解决由支持双击缩放手势引起的点击事件的延迟。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">touch-action</span>: manipulation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CSS属性 touch-action 用于指定某个给定的区域是否允许用户操作，以及如何响应用户操作（比如浏览器自带的划动、缩放等）。&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue改变对象的属性值视图不更新的问题</title>
    <link href="https://glows.github.io/2018/07/25/Vue%E6%94%B9%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E8%A7%86%E5%9B%BE%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://glows.github.io/2018/07/25/Vue%E6%94%B9%E5%8F%98%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E8%A7%86%E5%9B%BE%E4%B8%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2018-07-25T02:37:01.000Z</published>
    <updated>2020-08-10T06:56:48.975Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目在使用vue，遇到几次修改了对象的属性后，页面并不重新渲染，场景如下：</p><p>查看官方文档后了解到：<strong>受到javascript的限制，Vue不能检测到对象属性的添加或删除。因为Vue利用的是Object的defineProperty()方法，在初始化实列时将属性转为getter/setter，所以属性必须在data对象上才能让vue转换它。</strong><br>后通过查找资料修改为使用$set来设定修改值，js如下：<br>我们可以使用 Vue.set(object, key, value) 方法将响应属性添加到数组里的对象上。<br>所以将<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.stuList[index].checked=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><p>改成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(<span class="keyword">this</span>.stuList[index], <span class="string">'checked'</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>还可以使用 vm.$set实例方法，这也是全局 Vue.set方法的别名:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$set(<span class="keyword">this</span>.stuList[index],<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>但是依然没有起作用，</p><p>再从查找的资料才知道是数据层次太多，没有触发render函数进行自动更新，需手动调用，调用方式如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$forceUpdate();</span><br></pre></td></tr></table></figure></p><p>完整代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleCheck(index) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$forceUpdate();</span><br><span class="line">        <span class="keyword">this</span>.$set(<span class="keyword">this</span>.stuList[index],<span class="string">'checked'</span>,<span class="literal">true</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目在使用vue，遇到几次修改了对象的属性后，页面并不重新渲染，场景如下：&lt;/p&gt;
&lt;p&gt;查看官方文档后了解到：&lt;strong&gt;受到javascript的限制，Vue不能检测到对象属性的添加或删除。因为Vue利用的是Object的defineProperty()方法，在
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://glows.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据类型</title>
    <link href="https://glows.github.io/2018/07/24/Python-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://glows.github.io/2018/07/24/Python-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2018-07-24T08:07:24.000Z</published>
    <updated>2020-08-10T06:56:48.965Z</updated>
    
    <content type="html"><![CDATA[<p>Python 中的每个值都有一个数据类型。<br>在 Python 编程中，一切（万物）皆对象，如同在Unix上一切皆文件。数据类型实际上是类，变量是这些类的实例（对象）。<br>Python提供多种数据类型来存放数据项集合，主要包括序列（列表list和元组tuple），映射（如字典dict），集合（set）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python 中的每个值都有一个数据类型。&lt;br&gt;在 Python 编程中，一切（万物）皆对象，如同在Unix上一切皆文件。数据类型实际上是类，变量是这些类的实例（对象）。&lt;br&gt;Python提供多种数据类型来存放数据项集合，主要包括序列（列表list和元组tuple），映
      
    
    </summary>
    
    
    
      <category term="Python" scheme="https://glows.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>linux查看系统信息的一些命令</title>
    <link href="https://glows.github.io/2018/07/24/linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <id>https://glows.github.io/2018/07/24/linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</id>
    <published>2018-07-24T01:51:48.000Z</published>
    <updated>2020-08-10T06:56:48.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux查看系统信息的一些命令及查看已安装软件包的命令（转"><a href="#Linux查看系统信息的一些命令及查看已安装软件包的命令（转" class="headerlink" title="Linux查看系统信息的一些命令及查看已安装软件包的命令（转)"></a>Linux查看系统信息的一些命令及查看已安装软件包的命令（转)</h2><p>文章分类:操作系统</p><p>系统<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> uname -a               # 查看内核/操作系统/CPU信息</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> head -n 1 /etc/issue   # 查看操作系统版本</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> cat /proc/cpuinfo      # 查看CPU信息</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> hostname               # 查看计算机名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> lspci -tv              # 列出所有PCI设备</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> lsusb -tv              # 列出所有USB设备</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> lsmod                  # 列出加载的内核模块</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> env                    # 查看环境变量</span><br></pre></td></tr></table></figure></p> <a id="more"></a><p>资源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span> free -m                # 查看内存使用量和交换区使用量</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> df -h                  # 查看各分区使用情况</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> du -sh &lt;目录名&gt;        # 查看指定目录的大小</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> grep MemTotal /proc/meminfo   # 查看内存总量</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> grep MemFree /proc/meminfo    # 查看空闲内存量</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> uptime                 # 查看系统运行时间、用户数、负载</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> cat /proc/loadavg      # 查看系统负载</span><br></pre></td></tr></table></figure></p><p>磁盘和分区<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mount | column -t      # 查看挂接的分区状态</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> fdisk -l               # 查看所有分区</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> swapon -s              # 查看所有交换分区</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> hdparm -i /dev/hda     # 查看磁盘参数(仅适用于IDE设备)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> dmesg | grep IDE       # 查看启动时IDE设备检测状况</span><br></pre></td></tr></table></figure></p><p>网络<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ifconfig               # 查看所有网络接口的属性</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> iptables -L            # 查看防火墙设置</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> route -n               # 查看路由表</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> netstat -lntp          # 查看所有监听端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> netstat -antp          # 查看所有已经建立的连接</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> netstat -s             # 查看网络统计信息</span><br></pre></td></tr></table></figure></p><p>进程<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ps -ef                 # 查看所有进程</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> top                    # 实时显示进程状态</span><br></pre></td></tr></table></figure></p><p>用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> w                      # 查看活动用户</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> id &lt;用户名&gt;            # 查看指定用户信息</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> last                   # 查看用户登录日志</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> cut -d: -f1 /etc/passwd   # 查看系统所有用户</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> cut -d: -f1 /etc/group    # 查看系统所有组</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> crontab -l             # 查看当前用户的计划任务</span><br></pre></td></tr></table></figure><p>服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> chkconfig --list       # 列出所有系统服务</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> chkconfig --list | grep on    # 列出所有启动的系统服务</span><br></pre></td></tr></table></figure></p><p>程序<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> rpm -qa                # 查看所有安装的软件包</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Linux查看系统信息的一些命令及查看已安装软件包的命令（转&quot;&gt;&lt;a href=&quot;#Linux查看系统信息的一些命令及查看已安装软件包的命令（转&quot; class=&quot;headerlink&quot; title=&quot;Linux查看系统信息的一些命令及查看已安装软件包的命令（转)&quot;&gt;&lt;/a&gt;Linux查看系统信息的一些命令及查看已安装软件包的命令（转)&lt;/h2&gt;&lt;p&gt;文章分类:操作系统&lt;/p&gt;
&lt;p&gt;系统&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; uname -a               # 查看内核/操作系统/CPU信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; head -n 1 /etc/issue   # 查看操作系统版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; cat /proc/cpuinfo      # 查看CPU信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; hostname               # 查看计算机名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; lspci -tv              # 列出所有PCI设备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; lsusb -tv              # 列出所有USB设备&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; lsmod                  # 列出加载的内核模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; env                    # 查看环境变量&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://glows.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://glows.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>React与Redux</title>
    <link href="https://glows.github.io/2018/06/28/React%E4%B8%8ERedux/"/>
    <id>https://glows.github.io/2018/06/28/React%E4%B8%8ERedux/</id>
    <published>2018-06-28T06:09:12.000Z</published>
    <updated>2020-08-10T06:56:48.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React与Redux"><a href="#React与Redux" class="headerlink" title="React与Redux"></a>React与Redux</h1><p>Redux 的设计思想很简单，就两句话。<br>（1）Web 应用是一个状态机，视图与状态是一一对应的。<br>（2）所有的状态，保存在一个对象里面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React与Redux&quot;&gt;&lt;a href=&quot;#React与Redux&quot; class=&quot;headerlink&quot; title=&quot;React与Redux&quot;&gt;&lt;/a&gt;React与Redux&lt;/h1&gt;&lt;p&gt;Redux 的设计思想很简单，就两句话。&lt;br&gt;（1）Web 应用是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>vue问题收集</title>
    <link href="https://glows.github.io/2018/06/20/vue%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/"/>
    <id>https://glows.github.io/2018/06/20/vue%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</id>
    <published>2018-06-20T03:43:39.000Z</published>
    <updated>2020-08-10T06:56:48.979Z</updated>
    
    <content type="html"><![CDATA[<p>1、Why is Vue.js Chrome Devtools not detecting Vue.js?<br>打开本地文件vueDevtools 无法检测到Vue.js,<br>需要打开Chrome vueDevtools配置允许本地文件访问<br>One alternative is to set up a local web server, as the OP already stated.<br>The other - which IMHO is faster and less harassing - is letting the extension have access to file URLs, which is disabled by default.</p><p>Simply go to chrome://extensions and leave the “Allow access to file URLs” box checked for Vue.js devtools.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、Why is Vue.js Chrome Devtools not detecting Vue.js?&lt;br&gt;打开本地文件vueDevtools 无法检测到Vue.js,&lt;br&gt;需要打开Chrome vueDevtools配置允许本地文件访问&lt;br&gt;One altern
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker使用指南</title>
    <link href="https://glows.github.io/2018/05/29/docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://glows.github.io/2018/05/29/docker%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2018-05-29T06:03:46.000Z</published>
    <updated>2020-08-10T06:56:48.948Z</updated>
    
    <content type="html"><![CDATA[<image src="https://images.unsplash.com/photo-1520218750893-2be45c7cbf63?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=fc8274401d0f66d11be0cd3f5438e9a6&auto=format&fit=crop&w=2000&q=80" width="510" height="300">  <a id="more"></a><p>命令提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker --version Docker version </span><br><span class="line">docker-compose --version </span><br><span class="line">docker-machine --version </span><br><span class="line">docker ps</span><br><span class="line">docker version</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure></p><p>首先 Windows 下启动docker machine(更多命令 <figure class="highlight plain"><figcaption><span>-h```), 使用<code>dokcer-machine ls</code> 查看已安装的机器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>docker-machine start [machine name]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">执行</span><br></pre></td></tr></table></figure></p><p>docker-machine env [machine name]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行成功，会出现如下的代码：</span><br></pre></td></tr></table></figure></p><p>@FOR /f “tokens=*” %i IN (‘docker-machine env box’) DO @%i<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按提示拷贝在shell中执行</span><br><span class="line"></span><br><span class="line">下一步，输入```docker version```便会显示有Client和Server,如下</span><br></pre></td></tr></table></figure></p><p>Client:<br> Version:      17.10.0-ce<br> API version:  1.33<br> Go version:   go1.8.3<br> Git commit:   f4ffd25<br> Built:        Tue Oct 17 19:00:02 2017<br> OS/Arch:      windows/amd64</p><p>Server:<br> Version:      17.12.0-ce<br> API version:  1.35 (minimum version 1.12)<br> Go version:   go1.9.2<br> Git commit:   c97c6d6<br> Built:        Wed Dec 27 20:12:29 2017<br> OS/Arch:      linux/amd64<br> Experimental: false<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 使用```docker images```查看已安装的容器image。</span><br><span class="line"></span><br><span class="line">下一步运行镜像，</span><br><span class="line"></span><br><span class="line"> ```docker run [image name]</span><br></pre></td></tr></table></figure></p><p> 如果本地没有对应的镜像，docker会自动从dockerhub pull回本地。<br> 也可运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [image name]</span><br></pre></td></tr></table></figure><p>例如安装splash</p><p>1、Pull the image:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker pull scrapinghub/splash</span><br></pre></td></tr></table></figure></p><p>2、Start the container:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run -p 5023:5023 -p 8050:8050 -p 8051:8051 scrapinghub/splash</span><br></pre></td></tr></table></figure></p><p>3、Splash is now available at 0.0.0.0 at ports 8050 (http), 8051 (https) and 5023 (telnet).</p></image>]]></content>
    
    <summary type="html">
    
      &lt;image src=&quot;https://images.unsplash.com/photo-1520218750893-2be45c7cbf63?ixlib=rb-0.3.5&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;s=fc8274401d0f66d11be0cd3f5438e9a6&amp;auto=format&amp;fit=crop&amp;w=2000&amp;q=80&quot; width=&quot;510&quot; height=&quot;300&quot;&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://glows.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript模块规范 --- Commonjs、AMD、CMD、es6 modules</title>
    <link href="https://glows.github.io/2018/05/24/JavaScript%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83-Commonjs%E3%80%81AMD%E3%80%81CMD%E3%80%81es6-modules/"/>
    <id>https://glows.github.io/2018/05/24/JavaScript%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83-Commonjs%E3%80%81AMD%E3%80%81CMD%E3%80%81es6-modules/</id>
    <published>2018-05-24T02:37:24.000Z</published>
    <updated>2020-08-10T06:56:48.950Z</updated>
    
    <content type="html"><![CDATA[<p>关键词: import  require  javascript module<br><a id="more"></a></p><h2 id="JS模块化"><a href="#JS模块化" class="headerlink" title="JS模块化"></a>JS模块化</h2><ul><li>模块化的理解</li><li>什么是模块?<ul><li>将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起</li><li>块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信</li></ul></li><li>一个模块的组成<ul><li>数据—&gt;内部的属性</li><li>操作数据的行为—&gt;内部的函数</li></ul></li><li>模块化<ul><li>编码时是按照模块一个一个编码的, 整个项目就是一个模块化的项目</li></ul></li><li><p>模块化的进化过程</p><ul><li>全局function模式 : <ul><li>编码: 全局变量/函数</li><li>问题: 污染全局命名空间, 容易引起命名冲突/数据不安全</li></ul></li><li>namespace模式 : <ul><li>编码: 将数据/行为封装到对象中</li><li>解决: 命名冲突(减少了全局变量)</li><li>问题: 数据不安全(外部可以直接修改模块内部的数据)</li></ul></li><li>IIFE模式/增强<ul><li>IIFE : 立即调用函数表达式—&gt;匿名函数自调用</li><li>编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口</li><li>引入依赖: 通过函数形参来引入依赖模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(function(window, module2)&#123;</span><br><span class="line">  var data = &apos;atguigu.com&apos;</span><br><span class="line">  function foo() &#123;</span><br><span class="line">     module2.xxx()</span><br><span class="line">     console.log(&apos;foo()&apos;+data)</span><br><span class="line">  &#125;</span><br><span class="line">  function bar() &#123;</span><br><span class="line">     console.log(&apos;bar()&apos;+data)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  window.module = &#123;foo&#125;</span><br><span class="line">&#125;)(window, module2)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>模块化规范</p><ul><li><p>CommonJS</p><ul><li>Node.js : 服务器端</li><li>Browserify : 浏览器端    也称为js的打包工具</li><li><p>基本语法:</p><ul><li>定义暴露模块 : exports<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exports.xxx = value</span><br><span class="line">module.exports = value</span><br></pre></td></tr></table></figure></li></ul><p>引入模块 : require</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var module = require(&apos;模块名/模块相对路径&apos;)</span><br></pre></td></tr></table></figure></li><li><p>引入模块发生在什么时候?</p><ul><li>Node : 运行时, 动态同步引入</li><li>Browserify : 在运行前对模块进行编译/转译/打包的处理(已经将依赖的模块包含进来了), <pre><code>运行的是打包生成的js, 运行时不存在需要再从远程引入依赖模块</code></pre></li></ul></li></ul></li><li><p>AMD : 浏览器端</p><ul><li>require.js</li><li>基本语法<ul><li>定义暴露模块: define([依赖模块名], function(){return 模块对象})</li><li>引入模块: require([‘模块1’, ‘模块2’, ‘模块3’], function(m1, m2){//使用模块对象})</li><li>配置: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">  //基本路径</span><br><span class="line">  baseUrl : &apos;js/&apos;,</span><br><span class="line">  //标识名称与路径的映射</span><br><span class="line">  paths : &#123;</span><br><span class="line">    &apos;模块1&apos; : &apos;modules/模块1&apos;,</span><br><span class="line">    &apos;模块2&apos; : &apos;modules/模块2&apos;,</span><br><span class="line">    &apos;angular&apos; : &apos;libs/angular&apos;,</span><br><span class="line">    &apos;angular-messages&apos; : &apos;libs/angular-messages&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  //非AMD的模块</span><br><span class="line">  shim : &#123;</span><br><span class="line">    &apos;angular&apos; : &#123;</span><br><span class="line">        exports : &apos;angular&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;angular-messages&apos; : &#123;</span><br><span class="line">        exports : &apos;angular-messages&apos;,</span><br><span class="line">        deps : [&apos;angular&apos;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>CMD : 浏览器端</p><ul><li>sea.js</li><li><p>基本语法</p><ul><li><p>定义暴露模块: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(function(require, module, exports)&#123;</span><br><span class="line">  通过require引入依赖模块</span><br><span class="line">  通过module/exports来暴露模块</span><br><span class="line">  exports.xxx = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用模块seajs.use([‘模块1’, ‘模块2’])</p></li></ul></li></ul></li><li><p>ES6</p><ul><li>ES6内置了模块化的实现</li><li><p>基本语法</p><ul><li><p>定义暴露模块 : export</p><ul><li><p>暴露一个对象: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default 对象</span><br></pre></td></tr></table></figure></li><li><p>暴露多个: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export var xxx = value1</span><br><span class="line">export let yyy = value2</span><br><span class="line"></span><br><span class="line">var xxx = value1</span><br><span class="line">let yyy = value2</span><br><span class="line">export &#123;xxx, yyy&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul></li></ul><pre><code>  * 引入使用模块 : import    * default模块:      <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import xxx  from &apos;模块路径/模块名&apos;</span><br></pre></td></tr></table></figure>    * 其它模块      <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123;xxx, yyy&#125; from &apos;模块路径/模块名&apos;</span><br><span class="line">import * as module1 from &apos;模块路径/模块名&apos;</span><br></pre></td></tr></table></figure>* 问题: 所有浏览器还不能直接识别ES6模块化的语法  * 解决:    * 使用Babel将ES6---&gt;ES5(使用了CommonJS) ----浏览器还不能直接支行    * 使用Browserify---&gt;打包处理----浏览器可以运行</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词: import  require  javascript module&lt;br&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="https://glows.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>搭建gogs遇到的问题</title>
    <link href="https://glows.github.io/2018/05/21/%E6%90%AD%E5%BB%BAgogs%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://glows.github.io/2018/05/21/%E6%90%AD%E5%BB%BAgogs%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2018-05-21T02:25:55.000Z</published>
    <updated>2020-08-10T06:56:49.001Z</updated>
    
    <content type="html"><![CDATA[<p>关键词：git gogs<br><a id="more"></a></p><h3 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h3><p>客户端找不到 caching_sha2_password 插件，于是登录不上，本来是要这种插件的，但是其实<br>ALTER USER ‘root’@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘root’; 就行<br>因为客户端支持的这种native加密方式，然后还是连接不上？这时候改一下登录密码就行</p><h2 id="搭建gogs遇到的坑"><a href="#搭建gogs遇到的坑" class="headerlink" title="搭建gogs遇到的坑"></a>搭建gogs遇到的坑</h2><p>1.无法连接ssh，显示connection refuse。</p><pre><code>原因是“custom/conf/app.ini”没有开启ssh功能，改为以下配置就行了</code></pre><p>START_SSH_SERVER = true</p><p>2.配置了ssh后，gogs无法启动，错误信息是：Fail to start SSH server: listen tcp 0.0.0.0:22: bind: permission denied<br>       这个错误是用于服务器使用了端口22，所以要更改服务器gogs的端口号，<br>SSH_PORT         = 1111</p><p>3.使用ssh提示没有权限<br>     这是由于没有添加公共钥的原因，按下面方法添加即可</p><p>在本机生成公钥</p><p>ssh-keygen -t rsa -b 4096 -C “your_email@example.com”<br>拷贝公钥里面的内容   cat /home/user/.ssh/id_rsa.pub，在gogs的用户设置里面的“SSH 密钥”栏目就可以添加了。<br>git config –global user.name “Your Name”<br>git config –global user.email “email@example.com”</p><p>4.gogs无法开机启动</p><p>按照常规的方式添加脚本到 “/etc/init.d/”下竟然没有开机启动。在网上发现其他方式可以实现，主要是修改”/etc/rc.local”文件，在最后一行添加以下内容</p><p>/bin/su - git -c “/usr/bin/nohup /home/soft/gogs/gogs web”</p><p>5.在使用gogs的时候遇到各种各样的奇怪问题不知道怎样入手<br>gogs是有日志系统，通过查看日志文件就能知道哪里出错了，日志的路径在/gogs/log/，动态查看日志使用下面的命令很方便</p><p>tail -F /gogs/log/serv.log</p><p>tail -F /gogs/log/gogs.log</p><p>6.gogs默认使用本地配置，但是在vps上不知道怎样配置。</p><pre><code>使用vpn使服务器和本地处于同一网段，再利用： “http://0.0.0.0:3000” ，进行配置。</code></pre><p>7.如何通过公网ip访问搭建在vps上的gogs</p><pre><code>只需要配置“custom/conf/app.ini”文件“ROOT_URL“ </code></pre><p>ROOT_URL         = <a href="http://vps的ip地址/" target="_blank" rel="noopener">http://vps的ip地址/</a></p><p>8.如何通过域名访问gogs网站<br>需要利用nginx反向代理就可以实现，简单来说是通过访问vps的网址会指向nginx，而nginx又将访问间接指向gogs。</p><p>通过配置nginx的配置文件可以实现“/usr/local/nginx/conf/nginx.conf”，修改如下：</p><pre><code>location / {        proxy_pass http://127.0.0.1:3000/;        proxy_redirect default;   }</code></pre><p>9.centos上面没有安装nginx，通过命令也无法安装（解决不了依赖关系）</p><pre><code>最好的方法是通过yum install来安装nginx，但是安装不了只能自己编译nginx了。编译方式如下：</code></pre><p>yum install gcc-c++<br>yum install -y pcre pcre-devel<br>yum install -y zlib zlib-devel<br>yum install -y openssl openssl-devel</p><p>wget <a href="https://nginx.org/download/nginx-1.12.2.tar.gz" target="_blank" rel="noopener">https://nginx.org/download/nginx-1.12.2.tar.gz</a><br>tar -zxvf <a href="https://nginx.org/download/nginx-1.12.2.tar.gz" target="_blank" rel="noopener">https://nginx.org/download/nginx-1.12.2.tar.gz</a><br>cd nginx-1.12.2<br>./configure<br>make<br>make install<br>最后在”/etc/rc.local/“添加开机启动项<br>/usr/local/nginx/sbin/nginx</p><p>10.无法使用git clone，提示代码仓库不存在，可是在vps上面是看到这个仓库的</p><pre><code>反复修改配置文件，利用log跟踪问题所在，但是问题一直解决不了。最后通过删除gogs，重新解压一个就解决问题了。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词：git gogs&lt;br&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="https://glows.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>reactjs&amp;redux一些问题</title>
    <link href="https://glows.github.io/2018/05/17/reactjs&amp;redux%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://glows.github.io/2018/05/17/reactjs&amp;redux%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2018-05-17T03:12:16.000Z</published>
    <updated>2020-08-10T06:56:48.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="reactjs-amp-redux一些问题"><a href="#reactjs-amp-redux一些问题" class="headerlink" title="reactjs&amp;redux一些问题"></a>reactjs&amp;redux一些问题</h2><ul><li><p>缩进貌似会引起编译出错,遇到一次,不明觉厉;</p></li><li><p>html文本中不能有&lt;,&gt;这种字符,如果需要用,需要用html编码替代;</p></li><li><p>所有的React.createClass组件,命名时首字母要大写,不然会识别为一个标签而不是组件;</p></li></ul><a id="more"></a><ul><li>如果要把标签里的值需要字符串拼接,需要写成<br>{“hello”+data.world}<br>而不是<br>hello{data.world}<br>因为这样会生成更多的span标签:</li></ul><p>{“hello:” + data.world } = <span>hello:world</span><br>hello:{ data.world } = <span>hello:</span><span>world</span></p><ul><li><p>自定义属性不能直接写,要加data前缀如 data-id=data-id;并且属性名要统一小写;</p></li><li><p>注意this的值,大部分情况下,this是不会改变的,但是,执行ajax的时候 方法内部的this已被替换,记得要提前缓存this;</p></li><li><p>a标签的href要写成href={“url”}的形式，不然会出错，并且报出的错误不是这个；</p></li><li><p>div无法作为p标签的后代元素,会引起警告避免使用:<br>Warning: validateDOMNesting(…): <div> cannot appear as a descendant of <p>. See OrderPayInfoView &gt; p &gt; … &gt; div.c</p></div></p></li></ul><p>#JavaScript #React</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;reactjs-amp-redux一些问题&quot;&gt;&lt;a href=&quot;#reactjs-amp-redux一些问题&quot; class=&quot;headerlink&quot; title=&quot;reactjs&amp;amp;redux一些问题&quot;&gt;&lt;/a&gt;reactjs&amp;amp;redux一些问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缩进貌似会引起编译出错,遇到一次,不明觉厉;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;html文本中不能有&amp;lt;,&amp;gt;这种字符,如果需要用,需要用html编码替代;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的React.createClass组件,命名时首字母要大写,不然会识别为一个标签而不是组件;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="web前端" scheme="https://glows.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://glows.github.io/tags/React/"/>
    
      <category term="JavaScript" scheme="https://glows.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS函数式编程记录 </title>
    <link href="https://glows.github.io/2018/05/11/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    <id>https://glows.github.io/2018/05/11/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/</id>
    <published>2018-05-11T09:15:06.000Z</published>
    <updated>2020-08-10T06:56:48.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS函数式编程记录"><a href="#JS函数式编程记录" class="headerlink" title="JS函数式编程记录"></a>JS函数式编程记录</h2><h3 id="第一部分-组合"><a href="#第一部分-组合" class="headerlink" title="第一部分 组合"></a>第一部分 组合</h3><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> compose = <span class="function"><span class="keyword">function</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f(g(x));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toUpperCase = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x.toUpperCase(); &#125;;</span><br><span class="line"><span class="keyword">var</span> exclaim = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x + <span class="string">'!'</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> shout = compose(exclaim, toUpperCase);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = shout(<span class="string">"send in the clowns"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h4><p>./index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flickr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.11/require.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./flickr.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>实现声明式代码， 而非命令式。compose 表达式只是简单地指出了这样一个事实： 两个行为的组合。<br>这再次说明，声明式为潜在的代码更新提供了支持，使得我们的应用代码成为了一种高级规范（high level specification）。   </p><p>./flickr.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">        ramda: <span class="string">'https://cdnjs.cloudflare.com/ajax/libs/ramda/0.13.0/ramda.min'</span>,</span><br><span class="line">        jquery: <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([</span><br><span class="line">        <span class="string">'ramda'</span>,</span><br><span class="line">        <span class="string">'jquery'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">_, $</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> trace = _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">tag, x</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(tag, x);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> Impure = &#123;</span><br><span class="line">            getJSON: _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">callback, url</span>) </span>&#123;</span><br><span class="line">                $.getJSON(url, callback)</span><br><span class="line">            &#125;),</span><br><span class="line"></span><br><span class="line">            setHtml: _.curry(<span class="function"><span class="keyword">function</span>(<span class="params">sel, html</span>) </span>&#123;</span><br><span class="line">                $(sel).html(html)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> img = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $(<span class="string">'&lt;img /&gt;'</span>, &#123; <span class="attr">src</span>: url &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//////////////////////////</span></span><br><span class="line">        <span class="keyword">var</span> url = <span class="function"><span class="keyword">function</span>(<span class="params">term</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'https://api.flickr.com/services/feeds/photos_public.gne?tags='</span> + term + <span class="string">'&amp;format=json&amp;jsoncallback=?'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> app = _.compose(Impure.getJSON(trace(<span class="string">"response"</span>)), url);</span><br><span class="line">        <span class="keyword">var</span> mediaUrl = _.compose(_.prop(<span class="string">'m'</span>), _.prop(<span class="string">'media'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> srcs = _.compose(_.map(mediaUrl), _.prop(<span class="string">'items'</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// var renderImages = _.compose(Impure.setHtml(body), srcs);</span></span><br><span class="line">        <span class="comment">// var app = _.compose(Impure.getJSON(renderImages), url);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> images = _.compose(_.map(img), srcs);</span><br><span class="line">        <span class="keyword">var</span> renderImages = _.compose(Impure.setHtml(<span class="string">"body"</span>), images);</span><br><span class="line">        <span class="comment">// var app = _.compose(Impure.getJSON(renderImages), url);</span></span><br><span class="line"></span><br><span class="line">        app(<span class="string">"cats"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// var prop = _.curry(function(property, object) &#123;</span></span><br><span class="line">        <span class="comment">//     return object[property]</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS函数式编程记录&quot;&gt;&lt;a href=&quot;#JS函数式编程记录&quot; class=&quot;headerlink&quot; title=&quot;JS函数式编程记录&quot;&gt;&lt;/a&gt;JS函数式编程记录&lt;/h2&gt;&lt;h3 id=&quot;第一部分-组合&quot;&gt;&lt;a href=&quot;#第一部分-组合&quot; class=&quot;headerlink&quot; title=&quot;第一部分 组合&quot;&gt;&lt;/a&gt;第一部分 组合&lt;/h3&gt;&lt;h4 id=&quot;组合&quot;&gt;&lt;a href=&quot;#组合&quot; class=&quot;headerlink&quot; title=&quot;组合&quot;&gt;&lt;/a&gt;组合&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; compose = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;f, g&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f(g(x));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toUpperCase = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x.toUpperCase(); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; exclaim = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + &lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; shout = compose(exclaim, toUpperCase);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = shout(&lt;span class=&quot;string&quot;&gt;&quot;send in the clowns&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>柯里化函数与多个连续箭头函数</title>
    <link href="https://glows.github.io/2018/05/10/%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E4%B8%AA%E8%BF%9E%E7%BB%AD%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>https://glows.github.io/2018/05/10/%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%E4%B8%8E%E5%A4%9A%E4%B8%AA%E8%BF%9E%E7%BB%AD%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</id>
    <published>2018-05-10T07:27:36.000Z</published>
    <updated>2020-08-10T06:56:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="柯里化函数与多个连续箭头函数"><a href="#柯里化函数与多个连续箭头函数" class="headerlink" title="柯里化函数与多个连续箭头函数"></a>柯里化函数与多个连续箭头函数</h2><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，<br>是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，<br>并且返回接受余下的参数而且返回结果的新函数的技术。<br>这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的，<br>尽管它是Moses Schönfinkel和戈特洛布·弗雷格发明的。</p><p>说的明白一点就是，给函数传递一部分参数，让它返回一个函数去处理其他参数，举个例子，求三个数之和：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> addOne = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">z</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y + z</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> one = addOne(<span class="number">3</span>)   <span class="comment">// 函数工厂  : 创造函数的工厂  创建一个one 函数</span></span><br><span class="line"><span class="built_in">console</span>.log(one) <span class="comment">//ƒ (y) &#123;return function (z) &#123;return x + y + z&#125;&#125;</span></span><br><span class="line"><span class="keyword">let</span> two = one(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">console</span>.log(two) <span class="comment">//ƒ (z) &#123;return x + y + z&#125;</span></span><br><span class="line"><span class="keyword">let</span> three = two(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(three) <span class="comment">//12</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="多个连续箭头函数"><a href="#多个连续箭头函数" class="headerlink" title="多个连续箭头函数"></a>多个连续箭头函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add3 = add(<span class="number">3</span>)</span><br><span class="line">add3(<span class="number">4</span>) === <span class="number">3</span> + <span class="number">4</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>add 函数 在 es6 里的写法等价为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">a</span> =&gt;</span> b =&gt; a + b</span><br></pre></td></tr></table></figure><p>其实以上就是 柯里化函数 只不过用 es6 写，变了一个样子，后面详细介绍它的原理和特点。</p><p>关键就是理解柯里化，其实可以把它理解成，柯里化后，将第一个参数变量存在函数里面了(闭包–返回一个函数，可访问私有方法和变量)，然后本来需要n个参数的函数可以变成只需要剩下的（n - 1个）参数就可以调用，比如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">x</span> =&gt;</span> y =&gt; x + y</span><br><span class="line"><span class="keyword">let</span> add2 = add(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>本来完成 add 这个操作，应该是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y</span><br></pre></td></tr></table></figure></p><p>它需要俩参数，而现在 add2 函数完成同样操作只需要一个参数，这在函数式编程中广泛应用。</p><p>详细解释一下，就是 add2 函数 等价于 有了 x 这个闭包变量的 y =&gt; x + y 函数</p><p>并且此时 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```js</span><br><span class="line">add2(3) === 2 + 3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;柯里化函数与多个连续箭头函数&quot;&gt;&lt;a href=&quot;#柯里化函数与多个连续箭头函数&quot; class=&quot;headerlink&quot; title=&quot;柯里化函数与多个连续箭头函数&quot;&gt;&lt;/a&gt;柯里化函数与多个连续箭头函数&lt;/h2&gt;&lt;h3 id=&quot;柯里化&quot;&gt;&lt;a href=&quot;#柯里化&quot; class=&quot;headerlink&quot; title=&quot;柯里化&quot;&gt;&lt;/a&gt;柯里化&lt;/h3&gt;&lt;p&gt;在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，&lt;br&gt;是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，&lt;br&gt;并且返回接受余下的参数而且返回结果的新函数的技术。&lt;br&gt;这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的，&lt;br&gt;尽管它是Moses Schönfinkel和戈特洛布·弗雷格发明的。&lt;/p&gt;
&lt;p&gt;说的明白一点就是，给函数传递一部分参数，让它返回一个函数去处理其他参数，举个例子，求三个数之和：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; addOne = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;z&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y + z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; one = addOne(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;// 函数工厂  : 创造函数的工厂  创建一个one 函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(one) &lt;span class=&quot;comment&quot;&gt;//ƒ (y) &amp;#123;return function (z) &amp;#123;return x + y + z&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; two = one(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(two) &lt;span class=&quot;comment&quot;&gt;//ƒ (z) &amp;#123;return x + y + z&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; three = two(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(three) &lt;span class=&quot;comment&quot;&gt;//12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="函数编程" scheme="https://glows.github.io/tags/%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/"/>
    
      <category term="柯里化" scheme="https://glows.github.io/tags/%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript(ES6)新语法 </title>
    <link href="https://glows.github.io/2018/05/07/ECMAScript-ES6-%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    <id>https://glows.github.io/2018/05/07/ECMAScript-ES6-%E6%96%B0%E8%AF%AD%E6%B3%95/</id>
    <published>2018-05-07T03:50:10.000Z</published>
    <updated>2020-08-10T06:56:48.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-ES6-新语法"><a href="#ECMAScript-ES6-新语法" class="headerlink" title="ECMAScript(ES6)新语法"></a>ECMAScript(ES6)新语法</h1><p>01.课程介绍-ECMAScript 新功能</p><p>02.块的作用域-let</p><p>03.恒量-const</p><p>04.解构数组-Array Destructuring</p><p>05.解构对象-Object Destructuring</p><a id="more"></a><p>06.模版字符串-Template Strings</p><p>07.带标签的模版字符串-Tagged Templates</p><p>08.判断字符串里是否包含其他字符串</p><p>09.默认参数 - Default Parameter Values</p><p>10.展开操作符-Spread</p><p>11.剩余操作符Rest</p><p>12.解构参数 - Destructured Parameters</p><p>13.函数的名字-name属性</p><p>14.箭头函数-Arrow Fuctions<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123; &#125;</span><br></pre></td></tr></table></figure></p><p>15.对象表达式</p><p>16.对象属性名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  get foo() &#123;&#125;,</span><br><span class="line">  set foo(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.foo.name</span><br><span class="line"><span class="comment">// TypeError: Cannot read property 'name' of undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line">descriptor.get.name <span class="comment">// "get foo"</span></span><br><span class="line">descriptor.set.name <span class="comment">// "set foo"</span></span><br></pre></td></tr></table></figure><p>17.对比两个值是否相等-Object.is()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>18.把对象的值复制到另一个对象里 - Object.assign()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(target, source1, source2);</span><br><span class="line">target <span class="comment">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure></p><p>Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;<span class="attr">a</span>: &#123;<span class="attr">b</span>: <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class="line"></span><br><span class="line">obj1.a.b = <span class="number">2</span>;</span><br><span class="line">obj2.a.b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><p>19.设置对象的 prototype - Object.setPrototypeOf()<br>原型</p><p>20. __proto__</p><p>21.super</p><p>22.迭代器 - Iterators</p><p>23.生成器 - Generators</p><p>24.Classes - 类   </p><p>25.get 与 set  </p><p>26.静态方法-staitc  </p><p>27.继承-extends  </p><p>28.Set</p><p>29.Map</p><p>30.Module</p><p>模块</p><p>31.重命名导出与导入的东西<br>import   export<br>32.导出与导入默认</p><p>export default</p><p>p.s.  未完成</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ECMAScript-ES6-新语法&quot;&gt;&lt;a href=&quot;#ECMAScript-ES6-新语法&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript(ES6)新语法&quot;&gt;&lt;/a&gt;ECMAScript(ES6)新语法&lt;/h1&gt;&lt;p&gt;01.课程介绍-ECMAScript 新功能&lt;/p&gt;
&lt;p&gt;02.块的作用域-let&lt;/p&gt;
&lt;p&gt;03.恒量-const&lt;/p&gt;
&lt;p&gt;04.解构数组-Array Destructuring&lt;/p&gt;
&lt;p&gt;05.解构对象-Object Destructuring&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
