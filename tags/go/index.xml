<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Glow's Blog</title><link>https://glows.github.io/tags/go/</link><description>Recent content in Go on Glow's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>glows</copyright><lastBuildDate>Wed, 14 Jul 2021 15:14:40 +0000</lastBuildDate><atom:link href="https://glows.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 课程</title><link>https://glows.github.io/_posts/go-lesson/</link><pubDate>Wed, 14 Jul 2021 15:14:40 +0000</pubDate><guid>https://glows.github.io/_posts/go-lesson/</guid><description>Go 并行计算的核心-Goroutine Go 中比较核心的概念：协程(Coroutine)，在 Go 中被改写之后称之为：Goroutine，它是并发模型的基本执行单元。事实上每一个Go程序至少有一个Goroutine：主Goroutine。当程序启动时，它会自动创建
生成 go.mod文件：
Go mod init mod-demo 执行命令go list -m all 查看当前所有依赖项
Go web 框架 Gin (https://gin-gonic.com/) (https://github.com/gin-gonic/gin)
use the below Go command to install Gin.
go get -u github.com/gin-gonic/gin Import it in your code:
import &amp;quot;github.com/gin-gonic/gin&amp;quot; package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main() { r := gin.Default() r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;pong, hello world!&amp;#34;, }) }) r.Run() // listen and serve on 0.</description></item></channel></rss>