<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on Glow's Blog</title><link>https://glows.github.io/tags/react/</link><description>Recent content in React on Glow's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>glows</copyright><lastBuildDate>Wed, 12 Feb 2020 10:41:47 +0000</lastBuildDate><atom:link href="https://glows.github.io/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>React-Hooks 指南</title><link>https://glows.github.io/_posts/2020-2-12-%E5%AD%A6%E4%BC%9Areact-hooks/</link><pubDate>Wed, 12 Feb 2020 10:41:47 +0000</pubDate><guid>https://glows.github.io/_posts/2020-2-12-%E5%AD%A6%E4%BC%9Areact-hooks/</guid><description>React Hooks 含义 为函数组件提供钩子以实现外部功能，如添加状态
React 默认提供的四个最常用的钩子 useState() //状态 useEffect() //函数副作用 useContext() useReducer() 更多的 Hook包括 useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue 自定义Hook useImperativeHandle Typescript中搭配useImperativeHandle 和 forwardRef使用
export interface MyInputHandles { focus(): void; } const MyInput: RefForwardingComponent&amp;lt;MyInputHandles, MyInputProps&amp;gt; = ( props, ref ) =&amp;gt; { const inputRef = useRef&amp;lt;HTMLInputElement&amp;gt;(null); useImperativeHandle(ref, () =&amp;gt; ({ focus: () =&amp;gt; { if (inputRef.current) { inputRef.current.focus(); } }, })); return &amp;lt;input {...props} ref={inputRef} /&amp;gt;; }; export default forwardRef(MyInput); 建议useImperativeHandle和forwardRef同时使用，减少暴露给父组件的属性，避免使用 ref 这样的命令式代码 import { useRef,forwardRef,MutableRefObject,useImperativeHandle,Ref} from &amp;ldquo;react&amp;rdquo;;</description></item><item><title>Reactjs笔记</title><link>https://glows.github.io/_posts/reactjs%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 29 Jan 2019 14:30:41 +0000</pubDate><guid>https://glows.github.io/_posts/reactjs%E7%AC%94%E8%AE%B0/</guid><description>umiJs + antd_mobile + dvaJs 多类名及动态加载样式方法
覆盖组件样式 方法很简单，有两点需要注意：
引入的 antd 组件类名没有被 CSS Modules 转化，所以被覆盖的类名 .ant-select-selection 必须放到 :global 中。
因为上一条的关系，覆盖是全局性的。为了防止对其他 Select 组件造成影响，所以需要包裹额外的 className 限制样式的生效范围。 e.g.
.customSelect { :global { .ant-select-selection { max-height: 51px; overflow: auto; } } } model：模型
模型通常认为是视图(view)的内核，模型就是指视图的数据 // ES7新标准:装饰器（Decorator） @connect(state =&amp;gt; ({ user: state.user, }))
// 如果您不喜欢ES7装饰器，那好办，我就帮您写一个不用的 export default connect(state =&amp;gt; ({ user: state.user, }))(User);
dva的model 注意点： reducers 命名需正确，注意加s effects
子组件显示父组件穿过来的props有两种方式： 1、直接使用 这种方式，父组件改变props后，子组件重新渲染，由于直接使用的props，所以我们不需要做什么就可以正常显示最新的props
class Child extends Component { render() { return {this.</description></item><item><title>reactjs&amp;redux一些问题</title><link>https://glows.github.io/_posts/reactjsredux%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 17 May 2018 11:12:16 +0000</pubDate><guid>https://glows.github.io/_posts/reactjsredux%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="reactjsredux一些问题">reactjs&amp;amp;redux一些问题&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>缩进貌似会引起编译出错,遇到一次,不明觉厉;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>html文本中不能有&amp;lt;,&amp;gt;这种字符,如果需要用,需要用html编码替代;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有的React.createClass组件,命名时首字母要大写,不然会识别为一个标签而不是组件;&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React.js 记录</title><link>https://glows.github.io/_posts/react-js-%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 04 May 2018 11:34:48 +0000</pubDate><guid>https://glows.github.io/_posts/react-js-%E8%AE%B0%E5%BD%95/</guid><description>React.js 记录 概要 用了一段时间的 Reactjs，其实大部分的框架原理和 Vuejs 都很相似，包括响应式、足够轻量级、基于 Virtual-DOM 等特性。从整体上来看，Vuejs 是基于模版进行应用构建的，在中小型应用中有一定的优势。而 Reactjs 则需要我们在 JS 中使用 JSX 手动的来创建 DOM。
开始一个新的 Reactjs 项目，我们通过自动化的脚手架创建工具 create-react-app 来创建一个初始化的 Reactjs 工程。
Reactjs 本身通过计算 Virtual DOM 之间的差异（Diff）来更新 UI 组件。每当 props 或者 state 改变时，Reactjs 会重新计算生成一个 Virtual DOM 对象，并且通过比较两个 VM 对象之间的差异来找出数据改变引起对应在 UI 上的差异，最后采用最小的成本来更新 UI。 在纯函数组件（同样的数据对应同样的 UI）下，对于相同的 props 和 state，其对应的 UI 显示应该是相同的。因此，当传递给组件的 props 或者 state 的改变与之前相同时，Reactjs 可以完全省略掉此时对组件 VM 的 Diff 计算，这在某种程度上可以提高 Reactjs 组件的渲染性能。为此，Reactjs 为我们提供了扩展的插件（Addon）“PureRenderMixin” 来解决这个问题。
React是非常灵活的，但它也有一个严格的规则： 所有的React组件必须像纯函数那样使用它们的props。
组件通讯 当你遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。这样应用当中的状态数据就能够更方便地交流共享了。</description></item><item><title>react-native-初探</title><link>https://glows.github.io/_posts/react-native-%E5%88%9D%E6%8E%A2/</link><pubDate>Mon, 25 Dec 2017 16:46:00 +0000</pubDate><guid>https://glows.github.io/_posts/react-native-%E5%88%9D%E6%8E%A2/</guid><description>环境搭建 -Android开发环境 / MacOS Xcode 开发环境 -Node.js -npm -react native -编辑器 Visual Code
包依赖 基本：
react react-native
导航： react-navigation
Api获取： jsonwebtoken 运行项目 在此就默认 Android开发环境 / MacOS Xcode 开发环境 已搭建完成，继续执行下面的命令
react-native init myProject 测试安装
react-native init AwesomeProject cd AwesomeProject react-native run-android 写一个“hello world”&amp;mdash;-
import React, { Component } from &amp;#39;react&amp;#39;; import { Text } from &amp;#39;react-native&amp;#39;; export default class HelloWorldApp extends Component { render() { return ( &amp;lt;Text&amp;gt;Hello world!&amp;lt;/Text&amp;gt; ); } }</description></item></channel></rss>