<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react-hook on Glow's Blog</title><link>https://glows.github.io/tags/react-hook/</link><description>Recent content in react-hook on Glow's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>glows</copyright><lastBuildDate>Wed, 12 Feb 2020 10:41:47 +0000</lastBuildDate><atom:link href="https://glows.github.io/tags/react-hook/index.xml" rel="self" type="application/rss+xml"/><item><title>React-Hooks 指南</title><link>https://glows.github.io/_posts/2020-2-12-%E5%AD%A6%E4%BC%9Areact-hooks/</link><pubDate>Wed, 12 Feb 2020 10:41:47 +0000</pubDate><guid>https://glows.github.io/_posts/2020-2-12-%E5%AD%A6%E4%BC%9Areact-hooks/</guid><description>React Hooks 含义 为函数组件提供钩子以实现外部功能，如添加状态
React 默认提供的四个最常用的钩子 1useState() //状态 2 3useEffect() //函数副作用 4useContext() 5useReducer() 更多的 Hook包括 1useReducer 2useCallback 3useMemo 4useRef 5useImperativeHandle 6useLayoutEffect 7useDebugValue 8自定义Hook useImperativeHandle Typescript中搭配useImperativeHandle 和 forwardRef使用
1export interface MyInputHandles { 2 focus(): void; 3} 4 5const MyInput: RefForwardingComponent&amp;lt;MyInputHandles, MyInputProps&amp;gt; = ( 6 props, 7 ref 8) =&amp;gt; { 9 const inputRef = useRef&amp;lt;HTMLInputElement&amp;gt;(null); 10 11 useImperativeHandle(ref, () =&amp;gt; ({ 12 focus: () =&amp;gt; { 13 if (inputRef.current) { 14 inputRef.</description></item></channel></rss>