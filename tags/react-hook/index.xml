<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react-hook on Glow's Blog</title><link>https://example.com/tags/react-hook/</link><description>Recent content in react-hook on Glow's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>glows</copyright><lastBuildDate>Wed, 12 Feb 2020 10:41:47 +0000</lastBuildDate><atom:link href="https://example.com/tags/react-hook/index.xml" rel="self" type="application/rss+xml"/><item><title>React-Hooks 指南</title><link>https://example.com/_posts/2020-2-12-%E5%AD%A6%E4%BC%9Areact-hooks/</link><pubDate>Wed, 12 Feb 2020 10:41:47 +0000</pubDate><guid>https://example.com/_posts/2020-2-12-%E5%AD%A6%E4%BC%9Areact-hooks/</guid><description>React Hooks 含义 为函数组件提供钩子以实现外部功能，如添加状态
React 默认提供的四个最常用的钩子 useState() //状态 useEffect() //函数副作用 useContext() useReducer() 更多的 Hook包括 useReducer useCallback useMemo useRef useImperativeHandle useLayoutEffect useDebugValue 自定义Hook useImperativeHandle Typescript中搭配useImperativeHandle 和 forwardRef使用
export interface MyInputHandles { focus(): void; } const MyInput: RefForwardingComponent&amp;lt;MyInputHandles, MyInputProps&amp;gt; = ( props, ref ) =&amp;gt; { const inputRef = useRef&amp;lt;HTMLInputElement&amp;gt;(null); useImperativeHandle(ref, () =&amp;gt; ({ focus: () =&amp;gt; { if (inputRef.current) { inputRef.current.focus(); } }, })); return &amp;lt;input {...props} ref={inputRef} /&amp;gt;; }; export default forwardRef(MyInput); 建议useImperativeHandle和forwardRef同时使用，减少暴露给父组件的属性，避免使用 ref 这样的命令式代码 import { useRef,forwardRef,MutableRefObject,useImperativeHandle,Ref} from &amp;ldquo;react&amp;rdquo;;</description></item></channel></rss>