<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web前端 on Glow's Blog</title><link>https://glows.github.io/categories/web%E5%89%8D%E7%AB%AF/</link><description>Recent content in web前端 on Glow's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>glows</copyright><lastBuildDate>Thu, 17 May 2018 11:12:16 +0000</lastBuildDate><atom:link href="https://glows.github.io/categories/web%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>reactjs&amp;redux一些问题</title><link>https://glows.github.io/posts/reactjsredux%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 17 May 2018 11:12:16 +0000</pubDate><guid>https://glows.github.io/posts/reactjsredux%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid><description>&lt;h2 id="reactjsredux一些问题">reactjs&amp;amp;redux一些问题&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>缩进貌似会引起编译出错,遇到一次,不明觉厉;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>html文本中不能有&amp;lt;,&amp;gt;这种字符,如果需要用,需要用html编码替代;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有的React.createClass组件,命名时首字母要大写,不然会识别为一个标签而不是组件;&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React.js 记录</title><link>https://glows.github.io/posts/react-js-%E8%AE%B0%E5%BD%95/</link><pubDate>Fri, 04 May 2018 11:34:48 +0000</pubDate><guid>https://glows.github.io/posts/react-js-%E8%AE%B0%E5%BD%95/</guid><description>React.js 记录 概要 用了一段时间的 Reactjs，其实大部分的框架原理和 Vuejs 都很相似，包括响应式、足够轻量级、基于 Virtual-DOM 等特性。从整体上来看，Vuejs 是基于模版进行应用构建的，在中小型应用中有一定的优势。而 Reactjs 则需要我们在 JS 中使用 JSX 手动的来创建 DOM。
开始一个新的 Reactjs 项目，我们通过自动化的脚手架创建工具 create-react-app 来创建一个初始化的 Reactjs 工程。
Reactjs 本身通过计算 Virtual DOM 之间的差异（Diff）来更新 UI 组件。每当 props 或者 state 改变时，Reactjs 会重新计算生成一个 Virtual DOM 对象，并且通过比较两个 VM 对象之间的差异来找出数据改变引起对应在 UI 上的差异，最后采用最小的成本来更新 UI。 在纯函数组件（同样的数据对应同样的 UI）下，对于相同的 props 和 state，其对应的 UI 显示应该是相同的。因此，当传递给组件的 props 或者 state 的改变与之前相同时，Reactjs 可以完全省略掉此时对组件 VM 的 Diff 计算，这在某种程度上可以提高 Reactjs 组件的渲染性能。为此，Reactjs 为我们提供了扩展的插件（Addon）“PureRenderMixin” 来解决这个问题。
React是非常灵活的，但它也有一个严格的规则： 所有的React组件必须像纯函数那样使用它们的props。
组件通讯 当你遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。这样应用当中的状态数据就能够更方便地交流共享了。</description></item><item><title>vue 组件通信</title><link>https://glows.github.io/posts/vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</link><pubDate>Thu, 12 Apr 2018 11:35:44 +0000</pubDate><guid>https://glows.github.io/posts/vue-%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</guid><description>在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。 父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。看看它们是怎么工作的。 父组件通过 prop 给子组件下发数据:
1Vue.component(&amp;#39;child&amp;#39;, { 2 // 在 JavaScript 中使用 camelCase 3 props: [&amp;#39;myMessage&amp;#39;], 4 template: &amp;#39;&amp;lt;span&amp;gt;{{ myMessage }}&amp;lt;/span&amp;gt;&amp;#39; 5}) 1&amp;lt;!-- 在 HTML 中使用 kebab-case --&amp;gt; 2&amp;lt;child my-message=&amp;#34;hello!&amp;#34;&amp;gt;&amp;lt;/child&amp;gt; 子组件通过事件给父组件发送消息:
1&amp;lt;div id=&amp;#34;message-event-example&amp;#34; class=&amp;#34;demo&amp;#34;&amp;gt; 2 &amp;lt;p v-for=&amp;#34;msg in messages&amp;#34;&amp;gt;{{ msg }}&amp;lt;/p&amp;gt; 3 &amp;lt;button-message v-on:message=&amp;#34;handleMessage&amp;#34;&amp;gt;&amp;lt;/button-message&amp;gt; 4 &amp;lt;!-- 使用 $on(eventName) 监听事件 --&amp;gt; 5&amp;lt;/div&amp;gt; 1Vue.component(&amp;#39;button-message&amp;#39;, { 2 template: `&amp;lt;div&amp;gt; 3 &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;message&amp;#34; /&amp;gt; 4 &amp;lt;button v-on:click=&amp;#34;handleSendMessage&amp;#34;&amp;gt;Send&amp;lt;/button&amp;gt; 5 &amp;lt;/div&amp;gt;`, 6 data: function () { 7 return { 8 message: &amp;#39;test message&amp;#39; 9 } 10 }, 11 methods: { 12 handleSendMessage: function () { 13 this.</description></item><item><title>webpack初探</title><link>https://glows.github.io/posts/webpack%E5%88%9D%E6%8E%A2/</link><pubDate>Thu, 01 Feb 2018 14:22:34 +0000</pubDate><guid>https://glows.github.io/posts/webpack%E5%88%9D%E6%8E%A2/</guid><description>基本设置 入口文件
多入口
设置Hot Module Replacement(HMR) 热模块替换 热加载
代码拆分
chunk 块 by Route 节省用户带宽
This “Webpack Composition” technique was taken from Webpack Academy
BONUS 红利
webpack-bundle-analyzer</description></item></channel></rss>